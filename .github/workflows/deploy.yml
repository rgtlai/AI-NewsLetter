name: Deploy AI Newsletter to AWS

on:
  push:
    branches: main

env:
  AWS_REGION: us-east-1
  SAM_TEMPLATE: template.yaml

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests (if any)
        run: |
          # Add your test commands here
          echo "Tests would run here"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build SAM application
        run: sam build --use-container

      - name: Deploy SAM application
        run: |
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --stack-name ai-newsletter-app \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --resolve-s3 \
            --parameter-overrides \
              Environment=production \
              OpenAIApiKey="${{ secrets.OPENAI_API_KEY }}"

      - name: Get API URL
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ai-newsletter-app \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          echo "API deployed to: $API_URL"
